/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/BpKl03TTWEj
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator } from "@/components/ui/dropdown-menu"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"

export function Dashboard() {
  const [giftLists, setGiftLists] = useState([
    {
      id: 1,
      name: "Birthday",
      description: "Gifts for my birthday",
      date: "2023-06-01",
      owner: "Mine",
      gifts: [
        {
          id: 1,
          name: "Wireless Headphones",
          prize: 99.99,
          website: "Amazon",
          status: "Pending",
          assignedTo: [
            { id: 1, name: "John", initials: "J" },
            { id: 2, name: "Sarah", initials: "S" },
          ],
        },
        {
          id: 2,
          name: "Instant Pot",
          prize: 79.99,
          website: "Amazon",
          status: "Reserved",
          assignedTo: [{ id: 3, name: "Michael", initials: "M" }],
        },
      ],
    },
    {
      id: 2,
      name: "Wedding",
      description: "Gifts for Sarah and John's wedding",
      date: "2023-09-15",
      owner: "Sarah",
      gifts: [
        {
          id: 3,
          name: "Smartwatch",
          prize: 199.99,
          website: "Amazon",
          status: "Purchased",
          assignedTo: [
            { id: 1, name: "John", initials: "J" },
            { id: 2, name: "Sarah", initials: "S" },
            { id: 3, name: "Michael", initials: "M" },
          ],
        },
        {
          id: 4,
          name: "Noise-Cancelling Headphones",
          prize: 149.99,
          website: "Amazon",
          status: "Pending",
          assignedTo: [{ id: 1, name: "John", initials: "J" }],
        },
      ],
    },
    {
      id: 3,
      name: "Housewarming",
      description: "Gifts for Michael's new home",
      date: "2023-08-01",
      owner: "Michael",
      gifts: [
        {
          id: 5,
          name: "Espresso Machine",
          prize: 249.99,
          website: "Amazon",
          status: "Reserved",
          assignedTo: [
            { id: 2, name: "Sarah", initials: "S" },
            { id: 3, name: "Michael", initials: "M" },
          ],
        },
      ],
    },
  ])
  const [currentListId, setCurrentListId] = useState(1)
  const currentList = giftLists.find((list) => list.id === currentListId)
  const [showAddGiftModal, setShowAddGiftModal] = useState(false)
  const [showEditListModal, setShowEditListModal] = useState(false)
  const [newGift, setNewGift] = useState({
    name: "",
    prize: 0,
    website: "",
    status: "Pending",
    assignedTo: [],
  })
  const [currentUser, setCurrentUser] = useState({
    id: 1,
    name: "John",
    initials: "J",
  })
  const handleAddGift = () => {
    setGiftLists((prevLists) => {
      const updatedList = prevLists.map((list) => {
        if (list.id === currentListId) {
          return {
            ...list,
            gifts: [...list.gifts, { ...newGift, id: list.gifts.length + 1 }],
          }
        }
        return list
      })
      return updatedList
    })
    setShowAddGiftModal(false)
    setNewGift({
      name: "",
      prize: 0,
      website: "",
      status: "Pending",
      assignedTo: [],
    })
  }
  const handleEditList = (listId) => {
    setCurrentListId(listId)
    setShowEditListModal(true)
  }
  const handleUpdateList = (updatedList) => {
    setGiftLists((prevLists) => prevLists.map((list) => (list.id === updatedList.id ? updatedList : list)))
    setShowEditListModal(false)
  }
  const handleRemoveGift = (listId, giftId) => {
    setGiftLists((prevLists) =>
      prevLists.map((list) => {
        if (list.id === listId) {
          return {
            ...list,
            gifts: list.gifts.filter((gift) => gift.id !== giftId),
          }
        }
        return list
      }),
    )
  }
  const userGiftLists = giftLists.filter((list) =>
    list.gifts.some((gift) => gift.assignedTo.some((assignee) => assignee.id === currentUser.id)),
  )
  const invitedGiftLists = giftLists.filter((list) =>
    list.gifts.some((gift) => gift.assignedTo.some((assignee) => assignee.id !== currentUser.id)),
  )
  const groupedInvitedLists = invitedGiftLists.reduce((acc, list) => {
    if (!acc[list.owner]) {
      acc[list.owner] = []
    }
    acc[list.owner].push(list)
    return acc
  }, {})
  const handleShareList = () => {
    console.log("Sharing gift list:", currentList.name)
  }
  return (
    <div className="flex min-h-screen w-full">
      <aside className="bg-background border-r border-border p-4 hidden md:block">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <Avatar className="w-8 h-8">
              <AvatarImage src="/placeholder-user.jpg" />
              <AvatarFallback>{currentUser.initials}</AvatarFallback>
            </Avatar>
            <div>
              <div className="font-medium">{currentUser.name}</div>
              <div className="text-sm text-muted-foreground">User Settings</div>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild />
            <DropdownMenuContent align="end">
              <DropdownMenuItem>Profile</DropdownMenuItem>
              <DropdownMenuItem>Settings</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Logout</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <nav className="flex flex-col gap-2">
          {Object.keys(groupedInvitedLists).map((owner) => (
            <div key={owner} className="grid gap-2">
              <div className="font-medium text-muted-foreground">{owner}</div>
              {groupedInvitedLists[owner].map((list) => (
                <Link
                  key={list.id}
                  href="#"
                  onClick={() => handleEditList(list.id)}
                  className={`flex items-center gap-2 rounded-md px-3 py-2 text-sm font-medium transition-colors hover:bg-muted hover:text-foreground ${
                    list.id === currentListId ? "bg-muted text-foreground" : ""
                  }`}
                  prefetch={false}
                >
                  {list.name}
                </Link>
              ))}
            </div>
          ))}
          {userGiftLists.map((list) => (
            <Link
              key={list.id}
              href="#"
              onClick={() => handleEditList(list.id)}
              className={`flex items-center gap-2 rounded-md px-3 py-2 text-sm font-medium transition-colors hover:bg-muted hover:text-foreground ${
                list.id === currentListId ? "bg-muted text-foreground" : ""
              }`}
              prefetch={false}
            >
              {list.name}
            </Link>
          ))}
          <Button variant="outline" className="mt-4" onClick={() => setShowAddGiftModal(true)}>
            Add Gift List
          </Button>
        </nav>
      </aside>
      <main className="flex-1 p-6">
        <div className="grid gap-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>{currentList.name} Gifts</CardTitle>
                  <CardDescription>View and manage your recent {currentList.name} gifts.</CardDescription>
                </div>
                <div className="flex items-center gap-2">
                  <Button variant="outline" onClick={() => setShowEditListModal(true)}>
                    <FilePenIcon className="h-4 w-4 mr-2" />
                    Edit List
                  </Button>
                  <Button variant="outline" onClick={handleShareList}>
                    <ShareIcon className="h-4 w-4 mr-2" />
                    Share
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Gift</TableHead>
                    <TableHead>Prize</TableHead>
                    <TableHead>Website</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Assigned To</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {currentList.gifts.map((gift) => (
                    <TableRow key={gift.id}>
                      <TableCell>
                        <div className="font-medium">
                          <Link href="#" className="underline" prefetch={false}>
                            {gift.name}
                          </Link>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="font-medium">${gift.prize.toFixed(2)}</div>
                      </TableCell>
                      <TableCell>
                        <div className="font-medium">{gift.website}</div>
                      </TableCell>
                      <TableCell>
                        <Badge
                          variant={
                            gift.status === "Pending" ? "secondary" : gift.status === "Reserved" ? "success" : "success"
                          }
                        >
                          {gift.status}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          {gift.assignedTo.map((assignee) => (
                            <Avatar key={assignee.id} className="w-6 h-6">
                              <AvatarImage src="/placeholder-user.jpg" />
                              <AvatarFallback>{assignee.initials}</AvatarFallback>
                            </Avatar>
                          ))}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="outline" size="icon">
                            <FilePenIcon className="h-4 w-4" />
                            <span className="sr-only">Edit</span>
                          </Button>
                          <Button
                            variant="outline"
                            size="icon"
                            color="destructive"
                            onClick={() => handleRemoveGift(currentList.id, gift.id)}
                          >
                            <TrashIcon className="h-4 w-4" />
                            <span className="sr-only">Delete</span>
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
            <CardFooter>
              <Button variant="outline" onClick={() => setShowAddGiftModal(true)}>
                Add Gift
              </Button>
            </CardFooter>
          </Card>
        </div>
      </main>
      {showAddGiftModal && (
        <div>
          <div>
            <div>
              <div>Add Gift</div>
              <div>Add a new gift to the {currentList.name} gift list.</div>
            </div>
            <div>
              <div className="grid gap-4">
                <div className="grid gap-2">
                  <Label htmlFor="name">Name</Label>
                  <Input
                    id="name"
                    value={newGift.name}
                    onChange={(e) => setNewGift({ ...newGift, name: e.target.value })}
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="prize">Prize</Label>
                  <Input
                    id="prize"
                    type="number"
                    value={newGift.prize}
                    onChange={(e) => setNewGift({ ...newGift, prize: parseFloat(e.target.value) })}
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="website">Website</Label>
                  <Input
                    id="website"
                    value={newGift.website}
                    onChange={(e) => setNewGift({ ...newGift, website: e.target.value })}
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="status">Status</Label>
                  <Select
                    id="status"
                    value={newGift.status}
                    onChange={(e) => setNewGift({ ...newGift, status: e.target.value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Pending">Pending</SelectItem>
                      <SelectItem value="Reserved">Reserved</SelectItem>
                      <SelectItem value="Purchased">Purchased</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="assignedTo">Assigned To</Label>
                  <div />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

function FilePenIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>
  )
}


function ShareIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />
      <polyline points="16 6 12 2 8 6" />
      <line x1="12" x2="12" y1="2" y2="15" />
    </svg>
  )
}


function TrashIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}
