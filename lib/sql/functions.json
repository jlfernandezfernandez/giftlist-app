[
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.delete_gift_list(p_gift_list_id uuid, p_user_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    -- Verify if the gift list exists and is not already deleted\n    IF NOT EXISTS (SELECT 1 FROM giftlists WHERE id = p_gift_list_id AND is_deleted = FALSE) THEN\n        RAISE EXCEPTION 'Gift list not found or already deleted';\n    END IF;\n\n    -- Mark the gift list as deleted and set delete_date\n    UPDATE giftlists\n    SET is_deleted = TRUE,\n        delete_date = CURRENT_TIMESTAMP\n    WHERE id = p_gift_list_id;\n\n    -- Log activity\n    PERFORM log_activity(p_user_id, 'delete_giftlist', p_gift_list_id, NULL);\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.update_unassigned_gifts_to_pending()\n RETURNS TABLE(updated_gift_id uuid, previous_state text, new_state text)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    pending_state_id INT;\nBEGIN\n    -- Obtener el ID del estado 'pending'\n    SELECT id INTO pending_state_id FROM giftstates WHERE name = 'pending';\n\n    -- Actualizar los regalos y devolver informaci칩n sobre los cambios\n    RETURN QUERY\n    WITH updated_gifts AS (\n        UPDATE gifts g\n        SET state_id = pending_state_id\n        WHERE g.state_id IN (SELECT id FROM giftstates WHERE name IN ('bought', 'reserved'))\n          AND NOT EXISTS (SELECT 1 FROM giftusers gu WHERE gu.gift_id = g.id)\n          AND g.is_deleted = FALSE\n        RETURNING g.id, g.state_id AS previous_state_id\n    )\n    SELECT \n        ug.id AS updated_gift_id,\n        gs_prev.name::text AS previous_state,\n        'pending'::text AS new_state\n    FROM updated_gifts ug\n    JOIN giftstates gs_prev ON ug.previous_state_id = gs_prev.id;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.assign_user_to_gift(p_gift_id uuid, p_user_id uuid)\n RETURNS TABLE(id uuid, giftlist_id uuid, name text, description text, link text, website text, price numeric, currency text, state text, assigned_users jsonb)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    v_current_state INTEGER;\n    v_giftlist_id UUID;\nBEGIN\n    -- Verificar si el regalo existe y no est치 eliminado\n    IF NOT EXISTS (SELECT 1 FROM gifts WHERE gifts.id = p_gift_id AND is_deleted = FALSE) THEN\n        RAISE EXCEPTION 'Gift not found or already deleted';\n    END IF;\n\n    -- Verificar si el usuario ya est치 asignado al regalo\n    IF EXISTS (SELECT 1 FROM giftusers WHERE giftusers.gift_id = p_gift_id AND giftusers.user_id = p_user_id) THEN\n        RAISE EXCEPTION 'User is already assigned to this gift';\n    END IF;\n\n    INSERT INTO giftusers (gift_id, user_id)\n    VALUES (p_gift_id, p_user_id);\n\n    SELECT gifts.state_id, gifts.giftlist_id INTO v_current_state, v_giftlist_id\n    FROM gifts\n    WHERE gifts.id = p_gift_id;\n\n    IF v_current_state = 1 THEN\n        UPDATE gifts\n        SET state_id = 2\n        WHERE gifts.id = p_gift_id;\n    END IF;\n\n    -- Log activity\n    PERFORM log_activity(p_user_id, 'assign_gift', v_giftlist_id, p_gift_id);\n\n    -- Return updated gift data\n    RETURN QUERY\n    SELECT \n        g.id,\n        g.giftlist_id,\n        g.name::text,\n        g.description::text,\n        g.link::text,\n        g.website::text,\n        g.price,\n        g.currency::text,\n        gs.name::text AS state,\n        (\n            SELECT COALESCE(jsonb_agg(\n                jsonb_build_object(\n                    'userId', u.id::text, \n                    'name', u.name::text, \n                    'email', u.email::text\n                )\n            ), '[]'::jsonb)\n            FROM giftusers gu\n            JOIN users u ON gu.user_id = u.id\n            WHERE gu.gift_id = g.id\n        ) AS assigned_users\n    FROM gifts g\n    JOIN giftstates gs ON g.state_id = gs.id\n    WHERE g.id = p_gift_id;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.update_gift(p_gift_id uuid, p_name text, p_description text, p_link text, p_website text, p_price numeric, p_currency text, p_state text, p_user_id uuid)\n RETURNS TABLE(id uuid, giftlist_id uuid, name text, description text, link text, website text, price numeric, currency text, state text, assigned_users jsonb)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  v_state_id INT;\n  v_state_name TEXT;\n  v_giftlist_id UUID;\nBEGIN\n  -- Verificar si el regalo existe y no est치 eliminado\n  IF NOT EXISTS (SELECT 1 FROM gifts WHERE gifts.id = p_gift_id AND is_deleted = FALSE) THEN\n    RAISE EXCEPTION 'Gift not found or already deleted';\n  END IF;\n\n  -- Get the state id\n  SELECT gs.id INTO v_state_id\n  FROM giftstates gs\n  WHERE gs.name = p_state;\n\n  -- Update the gift\n  UPDATE gifts g\n  SET\n    name = COALESCE(p_name, g.name),\n    description = COALESCE(p_description, g.description),\n    link = COALESCE(p_link, g.link),\n    website = COALESCE(p_website, g.website),\n    price = COALESCE(p_price, g.price),\n    currency = COALESCE(p_currency, g.currency),\n    state_id = COALESCE(v_state_id, g.state_id),\n    modification_date = CURRENT_TIMESTAMP\n  WHERE g.id = p_gift_id\n  RETURNING g.giftlist_id INTO v_giftlist_id;\n\n  -- Log activity\n  PERFORM log_activity(p_user_id, 'edit_gift', v_giftlist_id, p_gift_id);\n\n  -- Get the state name\n  SELECT gs.name INTO v_state_name\n  FROM giftstates gs\n  WHERE gs.id = COALESCE(v_state_id, (SELECT g.state_id FROM gifts g WHERE g.id = p_gift_id));\n\n  -- Return the updated gift\n  RETURN QUERY\n  SELECT \n    g.id,\n    g.giftlist_id,\n    g.name::TEXT,\n    g.description::TEXT,\n    g.link::TEXT,\n    g.website::TEXT,\n    g.price,\n    g.currency::TEXT,\n    v_state_name AS state,\n    COALESCE(\n      (SELECT \n        jsonb_agg(json_build_object('userId', u.id, 'name', u.name, 'email', u.email))\n       FROM giftusers gu\n       JOIN users u ON gu.user_id = u.id\n       WHERE gu.gift_id = g.id),\n      '[]'::jsonb\n    ) AS assigned_users\n  FROM gifts g\n  WHERE g.id = p_gift_id;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.get_assigned_gifts_by_user_id(p_user_id uuid)\n RETURNS TABLE(id uuid, giftlist_id uuid, name text, description text, link text, website text, price numeric, currency text, state text, assigned_users jsonb)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN QUERY\n  SELECT \n    g.id,\n    g.giftlist_id,\n    g.name::TEXT,\n    g.description::TEXT,\n    g.link::TEXT,\n    g.website::TEXT,\n    g.price,\n    g.currency::TEXT,\n    gs.name::TEXT AS state,\n    (\n      SELECT jsonb_agg(json_build_object('userId', u.id, 'name', u.name, 'email', u.email))\n      FROM giftusers gu\n      JOIN users u ON gu.user_id = u.id\n      WHERE gu.gift_id = g.id\n    ) AS assigned_users\n  FROM \n    gifts g\n  JOIN \n    giftusers gu ON g.id = gu.gift_id\n  JOIN \n    giftstates gs ON g.state_id = gs.id\n  WHERE \n    gu.user_id = p_user_id\n    AND g.is_deleted = FALSE;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.get_gifts_by_list_id(list_id uuid)\n RETURNS TABLE(id uuid, giftlist_id uuid, name text, description text, link text, website text, price numeric, currency text, state text, assigned_users jsonb)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN QUERY\n  SELECT \n    g.id,\n    g.giftlist_id,\n    g.name::TEXT,\n    g.description::TEXT,\n    g.link::TEXT,\n    g.website::TEXT,\n    g.price,\n    g.currency::TEXT,\n    gs.name::TEXT AS state,\n    COALESCE(\n      (SELECT \n        jsonb_agg(json_build_object('userId', u.id, 'name', u.name, 'email', u.email))\n       FROM giftusers gu\n       JOIN users u ON gu.user_id = u.id\n       WHERE gu.gift_id = g.id),\n      '[]'::jsonb\n    ) AS assigned_users\n  FROM \n    gifts g\n  JOIN \n    giftstates gs ON g.state_id = gs.id\n  WHERE \n    g.giftlist_id = list_id\n    AND g.is_deleted = FALSE\n  ORDER BY \n    g.creation_date ASC;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.create_gift(p_giftlist_id uuid, p_name text, p_description text, p_link text, p_website text, p_price numeric, p_currency text, p_user_id uuid)\n RETURNS TABLE(id uuid, giftlist_id uuid, name text, description text, link text, website text, price numeric, currency text, state text, assigned_users jsonb)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  v_new_gift_id UUID;\n  v_state_name TEXT;\nBEGIN\n  -- Verificar si la lista de regalos existe\n  IF NOT EXISTS (SELECT 1 FROM giftlists WHERE giftlists.id = p_giftlist_id) THEN\n    RAISE EXCEPTION 'Gift list not found';\n  END IF;\n\n  -- Insert the new gift\n  INSERT INTO gifts (\n    giftlist_id,\n    name,\n    description,\n    link,\n    website,\n    price,\n    currency,\n    state_id,\n    creation_date\n  )\n  VALUES (\n    p_giftlist_id,\n    p_name,\n    p_description,\n    p_link,\n    p_website,\n    p_price,\n    p_currency,\n    1, -- Assuming 1 is the initial state (e.g., 'pending')\n    CURRENT_TIMESTAMP\n  )\n  RETURNING gifts.id INTO v_new_gift_id;\n\n  -- Get the state name\n  SELECT giftstates.name INTO v_state_name\n  FROM giftstates\n  WHERE giftstates.id = 1;\n\n  -- Log activity\n  PERFORM log_activity(p_user_id, 'create_gift', p_giftlist_id, v_new_gift_id);\n\n  -- Return the created gift\n  RETURN QUERY\n  SELECT \n    g.id,\n    g.giftlist_id,\n    g.name::text,\n    g.description::text,\n    g.link::text,\n    g.website::text,\n    g.price,\n    g.currency::text,\n    gs.name::text AS state,\n    '[]'::jsonb AS assigned_users\n  FROM gifts g\n  JOIN giftstates gs ON g.state_id = gs.id\n  WHERE g.id = v_new_gift_id;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.unassign_user_from_gift(p_gift_id uuid, p_user_id uuid)\n RETURNS TABLE(id uuid, giftlist_id uuid, name text, description text, link text, website text, price numeric, currency text, state text, assigned_users jsonb)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    v_remaining_users INTEGER;\n    v_giftlist_id UUID;\nBEGIN\n    -- Verificar si el regalo existe y no est치 eliminado\n    IF NOT EXISTS (SELECT 1 FROM gifts WHERE gifts.id = p_gift_id AND gifts.is_deleted = FALSE) THEN\n        RAISE EXCEPTION 'Gift not found or already deleted';\n    END IF;\n\n    -- Verificar si el usuario est치 asignado al regalo\n    IF NOT EXISTS (SELECT 1 FROM giftusers WHERE giftusers.gift_id = p_gift_id AND giftusers.user_id = p_user_id) THEN\n        RAISE EXCEPTION 'User is not assigned to this gift';\n    END IF;\n\n    -- Obtener el giftlist_id antes de eliminar la asignaci칩n\n    SELECT gifts.giftlist_id INTO v_giftlist_id\n    FROM gifts\n    WHERE gifts.id = p_gift_id;\n\n    -- Eliminar la asignaci칩n del usuario\n    DELETE FROM giftusers\n    WHERE giftusers.gift_id = p_gift_id AND giftusers.user_id = p_user_id;\n\n    -- Contar cu치ntos usuarios quedan asignados a este regalo\n    SELECT COUNT(*) INTO v_remaining_users\n    FROM giftusers\n    WHERE giftusers.gift_id = p_gift_id;\n\n    -- Si no quedan usuarios asignados, volver al estado 'pending' (1)\n    IF v_remaining_users = 0 THEN\n        UPDATE gifts\n        SET state_id = 1\n        WHERE gifts.id = p_gift_id;\n    END IF;\n\n    -- Registrar la actividad\n    PERFORM log_activity(p_user_id, 'unassign_gift', v_giftlist_id, p_gift_id);\n\n    -- Return updated gift data\n    RETURN QUERY\n    SELECT \n        g.id,\n        g.giftlist_id,\n        g.name::text,\n        g.description::text,\n        g.link::text,\n        g.website::text,\n        g.price,\n        g.currency::text,\n        gs.name::text AS state,\n        COALESCE(\n            (\n                SELECT jsonb_agg(\n                    jsonb_build_object(\n                        'userId', u.id::text, \n                        'name', u.name::text, \n                        'email', u.email::text\n                    )\n                )\n                FROM giftusers gu\n                JOIN users u ON u.id = gu.user_id\n                WHERE gu.gift_id = g.id\n            ),\n            '[]'::jsonb\n        ) AS assigned_users\n    FROM gifts g\n    JOIN giftstates gs ON gs.id = g.state_id\n    WHERE g.id = p_gift_id;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.log_activity(p_user_id uuid, p_action_type text, p_giftlist_id uuid DEFAULT NULL::uuid, p_gift_id uuid DEFAULT NULL::uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    v_action_type_id INT;\nBEGIN\n    -- Intentar obtener el ID del tipo de acci칩n\n    SELECT id INTO v_action_type_id FROM action_types WHERE name = p_action_type;\n    \n    -- Si no existe, insertar un nuevo tipo de acci칩n\n    IF v_action_type_id IS NULL THEN\n        INSERT INTO action_types (name) VALUES (p_action_type) RETURNING id INTO v_action_type_id;\n    END IF;\n\n    -- Insertar el registro de actividad\n    INSERT INTO activity_log (user_id, giftlist_id, gift_id, action_type_id)\n    VALUES (p_user_id, p_giftlist_id, p_gift_id, v_action_type_id);\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.update_gift_list(p_gift_list_id uuid, p_name text, p_description text, p_date timestamp with time zone, p_user_id uuid)\n RETURNS TABLE(id uuid, name text, description text, date timestamp with time zone, modification_date timestamp with time zone, users jsonb)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  UPDATE giftlists\n  SET name = p_name,\n      description = p_description,\n      date = p_date,\n      modification_date = CURRENT_TIMESTAMP\n  WHERE giftlists.id = p_gift_list_id;\n\n  -- Log activity\n  PERFORM log_activity(p_user_id, 'edit_giftlist', p_gift_list_id, NULL);\n\n  RETURN QUERY \n  SELECT \n    gl.id, gl.name::TEXT, gl.description::TEXT, gl.date::TIMESTAMP WITH TIME ZONE,\n    gl.modification_date::TIMESTAMP WITH TIME ZONE,\n    jsonb_agg(json_build_object('userId', u.id, 'name', u.name, 'email', u.email, 'role', r.name)) AS users\n  FROM giftlists gl\n  JOIN giftlistusers glu ON gl.id = glu.giftlist_id\n  JOIN users u ON glu.user_id = u.id\n  JOIN roles r ON glu.role_id = r.id\n  WHERE gl.id = p_gift_list_id\n  GROUP BY gl.id, gl.name, gl.description, gl.date, gl.modification_date;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.create_and_associate_gift_list(p_list_name text, p_list_description text, p_list_date timestamp with time zone, p_user_id uuid)\n RETURNS TABLE(id uuid, name text, description text, date timestamp with time zone, creation_date timestamp with time zone, users jsonb)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    new_gift_list_id UUID;\nBEGIN\n  INSERT INTO giftlists (name, description, date, creation_date)\n  VALUES (p_list_name, p_list_description, p_list_date, CURRENT_TIMESTAMP)\n  RETURNING giftlists.id INTO new_gift_list_id;\n\n  INSERT INTO giftlistusers (giftlist_id, user_id, role_id)\n  VALUES (new_gift_list_id, p_user_id, 1);\n\n  -- Log activity\n  PERFORM log_activity(p_user_id, 'create_giftlist', new_gift_list_id, NULL);\n\n  RETURN QUERY \n  SELECT \n    gl.id, gl.name::TEXT, gl.description::TEXT, gl.date::TIMESTAMP WITH TIME ZONE,\n    gl.creation_date::TIMESTAMP WITH TIME ZONE,\n    jsonb_agg(json_build_object('userId', u.id, 'name', u.name, 'email', u.email, 'role', r.name)) AS users\n  FROM giftlists gl\n  JOIN giftlistusers glu ON gl.id = glu.giftlist_id\n  JOIN users u ON glu.user_id = u.id\n  JOIN roles r ON glu.role_id = r.id\n  WHERE gl.id = new_gift_list_id\n  GROUP BY gl.id, gl.name, gl.description, gl.date, gl.creation_date;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.delete_gift(p_gift_id uuid, p_user_id uuid)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    v_giftlist_id UUID;\nBEGIN\n    -- Verificar si el regalo existe y no est치 ya eliminado\n    IF NOT EXISTS (SELECT 1 FROM gifts WHERE id = p_gift_id AND is_deleted = FALSE) THEN\n        RAISE EXCEPTION 'Gift not found or already deleted';\n    END IF;\n\n    -- Obtener el giftlist_id antes de marcar el regalo como eliminado\n    SELECT giftlist_id INTO v_giftlist_id FROM gifts WHERE id = p_gift_id;\n\n    -- Marcar el regalo como eliminado y establecer delete_date\n    UPDATE gifts\n    SET is_deleted = TRUE,\n        delete_date = CURRENT_TIMESTAMP\n    WHERE id = p_gift_id;\n\n    -- Registrar la actividad\n    PERFORM log_activity(p_user_id, 'delete_gift', v_giftlist_id, p_gift_id);\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.analyze_gift_tables()\n RETURNS TABLE(table_name text, analyzed boolean, message text)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    tables text[] := ARRAY['gifts', 'giftlists', 'giftusers', 'giftlistusers', 'users', 'roles', 'giftstates'];\n    t text;\nBEGIN\n    FOREACH t IN ARRAY tables\n    LOOP\n        BEGIN\n            EXECUTE 'ANALYZE ' || t;\n            table_name := t;\n            analyzed := true;\n            message := 'Successfully analyzed';\n            RETURN NEXT;\n        EXCEPTION\n            WHEN OTHERS THEN\n                table_name := t;\n                analyzed := false;\n                message := 'Error: ' || SQLERRM;\n                RETURN NEXT;\n        END;\n    END LOOP;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.get_gift_lists_from_user(userid uuid)\n RETURNS TABLE(id uuid, name text, description text, date timestamp with time zone, users jsonb, is_owner boolean)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  RETURN QUERY\n  SELECT \n    gl.id,\n    gl.name::TEXT,\n    gl.description::TEXT,\n    gl.date::TIMESTAMP WITH TIME ZONE,\n    jsonb_agg(\n      jsonb_build_object(\n        'userId', u.id, \n        'name', u.name, \n        'email', u.email, \n        'role', r.name\n      ) ORDER BY u.name\n    ) AS users,\n    bool_or(glu.user_id = userid AND r.name = 'owner') AS is_owner\n  FROM \n    giftlists gl\n  JOIN \n    giftlistusers glu ON gl.id = glu.giftlist_id\n  JOIN \n    users u ON glu.user_id = u.id\n  JOIN \n    roles r ON glu.role_id = r.id\n  WHERE \n    gl.id IN (\n      SELECT giftlist_id \n      FROM giftlistusers \n      WHERE user_id = userid\n    )\n    AND gl.is_deleted = FALSE\n  GROUP BY \n    gl.id\n  ORDER BY\n    gl.date DESC;\nEND;\n$function$\n"
  },
  {
    "pg_get_functiondef": "CREATE OR REPLACE FUNCTION public.associate_user_to_gift_list(p_gift_list_id uuid, p_user_id uuid, p_role text)\n RETURNS TABLE(giftlist_id uuid, user_id uuid, role_name text)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  v_role_id INT;\nBEGIN\n  -- Existing logic...\n  SELECT id INTO v_role_id FROM roles WHERE name = p_role;\n  IF v_role_id IS NULL THEN\n    RAISE EXCEPTION 'Role not found: %', p_role;\n  END IF;\n  IF EXISTS (\n    SELECT 1 FROM giftlistusers glu\n    WHERE glu.giftlist_id = p_gift_list_id AND glu.user_id = p_user_id AND glu.role_id = 1\n  ) THEN\n    RAISE EXCEPTION 'User is already the owner of the gift list';\n  END IF;\n  INSERT INTO giftlistusers (giftlist_id, user_id, role_id)\n  VALUES (p_gift_list_id, p_user_id, v_role_id);\n\n  -- Log activity\n  PERFORM log_activity(p_user_id, 'associate_user_to_giftlist', p_gift_list_id, NULL);\n\n  -- Return result\n  RETURN QUERY\n  SELECT glu.giftlist_id, glu.user_id, r.name::TEXT AS role_name\n  FROM giftlistusers glu\n  JOIN roles r ON glu.role_id = r.id\n  WHERE glu.giftlist_id = p_gift_list_id AND glu.user_id = p_user_id;\nEND;\n$function$\n"
  }
]